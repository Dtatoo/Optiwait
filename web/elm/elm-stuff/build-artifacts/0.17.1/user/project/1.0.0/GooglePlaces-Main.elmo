var _user$project$GooglePlaces_Main$getDescriptions = function (model) {
	return function (_p0) {
		return A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.description;
			},
			function (_) {
				return _.predictions;
			}(_p0));
	}(model);
};
var _user$project$GooglePlaces_Main$descriptionsView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$List$map,
			function (item) {
				return A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(item)
						]));
			},
			_user$project$GooglePlaces_Main$getDescriptions(model)));
};
var _user$project$GooglePlaces_Main$hardCodedQuery = _elm_lang$core$Native_List.fromArray(
	[
		{ctor: '_Tuple2', _0: 'location', _1: '52.133333,-106.683333'},
		{ctor: '_Tuple2', _0: 'input', _1: 'UofS'},
		{ctor: '_Tuple2', _0: 'key', _1: 'AIzaSyBLh2_PpmwPEybHZp4whBMxsVDiwfvfntg'}
	]);
var _user$project$GooglePlaces_Main$init = _user$project$GooglePlaces_Model$init;
var _user$project$GooglePlaces_Main$SignUpPage = {ctor: 'SignUpPage'};
var _user$project$GooglePlaces_Main$FetchFail = function (a) {
	return {ctor: 'FetchFail', _0: a};
};
var _user$project$GooglePlaces_Main$FetchSuccess = function (a) {
	return {ctor: 'FetchSuccess', _0: a};
};
var _user$project$GooglePlaces_Main$getPlacesData = function (query) {
	var getUrl = 'https://maps.googleapis.com/maps/api/place/autocomplete/json';
	var urlWithQuery = A2(_evancz$elm_http$Http$url, getUrl, _user$project$GooglePlaces_Main$hardCodedQuery);
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$GooglePlaces_Main$FetchFail,
		_user$project$GooglePlaces_Main$FetchSuccess,
		A2(_evancz$elm_http$Http$get, _user$project$GooglePlaces_PlacesDecoder$decodeGooglePlaces, urlWithQuery));
};
var _user$project$GooglePlaces_Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'Fetch':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$GooglePlaces_Main$getPlacesData(_user$project$GooglePlaces_Main$hardCodedQuery)
				};
			case 'FetchSuccess':
				return {ctor: '_Tuple2', _0: _p1._0, _1: _elm_lang$core$Platform_Cmd$none};
			case 'FetchFail':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl('signup')
				};
		}
	});
var _user$project$GooglePlaces_Main$Fetch = {ctor: 'Fetch'};
var _user$project$GooglePlaces_Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h1,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Google Place Test')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$GooglePlaces_Main$Fetch)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('GET PLACE!')
					])),
				_user$project$GooglePlaces_Main$descriptionsView(model)
			]));
};
